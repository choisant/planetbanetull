import numpy as np
import matplotlib.pyplot as plt

T = 1                       #Orbital period [yr] (3.2e7 [s])
R = 1                       #Aphelion distance (radius of path) [AU] (1.5e11 [m])
GM = 4*(np.pi**2)           #Mass of Sun*Gravitaional constant [AU^3/yr^2]
m = (4*(np.pi**2))/332950   #Mass of Earth [AU^3/yr^2] (6.0e24 [kg])

C = -(GM)/(R**3)

#Initial conditions
X0 = 1
Y0 = 0
U0 = 0
V0 = 2*np.pi

t_max = 1
dt = 0.0001             #time step / tau
N = int(t_max/dt)

#RUNGE-KUTTA (4th order)
def F(X_, Y_, U_, V_):  #dX/dt
  return U_

def G(X_, Y_, U_, V_):  #dY/dt
  return V_

def H(X_, Y_, U_, V_):  #dU/dt
  return C*X_

def I(X_, Y_, U_, V_): #dV/dt
    return C*Y_

X_RK = np.zeros(N)
Y_RK = np.zeros(N)
U_RK = np.zeros(N)
V_RK = np.zeros(N)
E_RK = np.zeros(N-1)    #Total energy/mass
Ek_RK = np.zeros(N-1)   #Kinetic energy
Ep_RK = np.zeros(N-1)   #Potential energy

X_RK[0] = X0
Y_RK[0] = Y0
U_RK[0] = U0
V_RK[0] = V0

for n in range(N-1):
  k_x1 = dt * F( X_RK[n], Y_RK[n], U_RK[n], V_RK[n] )
  k_y1 = dt * G( X_RK[n], Y_RK[n], U_RK[n], V_RK[n] )
  k_u1 = dt * H( X_RK[n], Y_RK[n], U_RK[n], V_RK[n] )
  k_v1 = dt * I( X_RK[n], Y_RK[n], U_RK[n], V_RK[n] )
    
  k_x2 = dt * F( X_RK[n] + k_x1/2, Y_RK[n] + k_y1/2, U_RK[n] + k_u1/2, V_RK[n] + k_v1/2 )
  k_y2 = dt * G( X_RK[n] + k_x1/2, Y_RK[n] + k_y1/2, U_RK[n] + k_u1/2, V_RK[n] + k_v1/2 )
  k_u2 = dt * H( X_RK[n] + k_x1/2, Y_RK[n] + k_y1/2, U_RK[n] + k_u1/2, V_RK[n] + k_v1/2 )
  k_v2 = dt * I( X_RK[n] + k_x1/2, Y_RK[n] + k_y1/2, U_RK[n] + k_u1/2, V_RK[n] + k_v1/2 )
    
  k_x3 = dt * F( X_RK[n] + k_x2/2, Y_RK[n] + k_y2/2, U_RK[n] + k_u2/2, V_RK[n] + k_v2/2 )
  k_y3 = dt * G( X_RK[n] + k_x2/2, Y_RK[n] + k_y2/2, U_RK[n] + k_u2/2, V_RK[n] + k_v2/2 )
  k_u3 = dt * H( X_RK[n] + k_x2/2, Y_RK[n] + k_y2/2, U_RK[n] + k_u2/2, V_RK[n] + k_v2/2 )
  k_v3 = dt * I( X_RK[n] + k_x2/2, Y_RK[n] + k_y2/2, U_RK[n] + k_u2/2, V_RK[n] + k_v2/2 )
    
  k_x4 = dt * F( X_RK[n] + k_x3, Y_RK[n] + k_y3, U_RK[n] + k_u3, V_RK[n] + k_v3 )
  k_y4 = dt * G( X_RK[n] + k_x3, Y_RK[n] + k_y3, U_RK[n] + k_u3, V_RK[n] + k_v3 )
  k_u4 = dt * H( X_RK[n] + k_x3, Y_RK[n] + k_y3, U_RK[n] + k_u3, V_RK[n] + k_v3 )
  k_v4 = dt * I( X_RK[n] + k_x3, Y_RK[n] + k_y3, U_RK[n] + k_u3, V_RK[n] + k_v3 )
    
  X_RK[n+1] = X_RK[n] + k_x1/6 + k_x2/3 + k_x3/3 + k_x4/6
  Y_RK[n+1] = Y_RK[n] + k_y1/6 + k_y2/3 + k_y3/3 + k_y4/6
  U_RK[n+1] = U_RK[n] + k_u1/6 + k_u2/3 + k_u3/3 + k_u4/6
  V_RK[n+1] = V_RK[n] + k_v1/6 + k_v2/3 + k_v3/3 + k_v4/6

  Ek_RK[n] = 0.5 * m * np.sqrt(U_RK[n]**2 + V_RK[n]**2)
  Ep_RK[n] = -((GM) * m) / (np.sqrt(X_RK[n]**2 + Y_RK[n]**2))
  E_RK[n] = Ek_RK[n] + Ep_RK[n]
  
#EULER-CROMER
dt_EC = 0.000001                #Time step / tau
N_EC= int(t_max/dt_EC)  
  
X_EC = np.zeros(N_EC)
Y_EC = np.zeros(N_EC)
U_EC = np.zeros(N_EC)
V_EC = np.zeros(N_EC)
E_EC = np.zeros(N_EC-1)         #Total energy/mass
Ek_EC = np.zeros(N_EC-1)
Ep_EC = np.zeros(N_EC-1)

X_EC[0] = X0
Y_EC[0] = Y0
U_EC[0] = U0
V_EC[0] = V0

for n in range(N_EC-1):
    U_EC[n+1] = U_EC[n] + dt_EC * H(X_EC[n], Y_EC[n], U_EC[n], V_EC[n])
    X_EC[n+1] = X_EC[n] + dt_EC * F(X_EC[n], Y_EC[n], U_EC[n+1], V_EC[n])
    
    V_EC[n+1] = V_EC[n] + dt_EC * I(X_EC[n], Y_EC[n], U_EC[n], V_EC[n])
    Y_EC[n+1] = Y_EC[n] + dt_EC * G(X_EC[n], Y_EC[n], U_EC[n], V_EC[n+1])
    
    Ek_EC[n] = 0.5 * m * np.sqrt(U_EC[n]**2 + V_EC[n]**2)   
    Ep_EC[n] = -((GM) * m) / (np.sqrt(X_EC[n]**2 + Y_EC[n]**2))
    E_EC[n] = Ek_EC[n] + Ep_EC[n]
    
#print(U_EC,X_EC)

#Plots_______________________________________________

#RK
plt.figure()
plt.title("4th order Runge-Kutta")
plt.plot(X_RK, Y_RK, color = "crimson", label = "Earth orbit")
plt.plot([0], [0], color = "darkorange", marker = "o", markersize = 19, label = "Fixed sun")
plt.legend(loc = 4)
plt.xlabel(r"$x$ [AU]")
plt.ylabel(r"$y$ [AU]")
plt.grid()
plt.show()

plt.figure()
plt.title("Velocity along x- and y-axis, RK")
plt.plot(U_RK, color = "magenta", label = "Velocity along x-axis")
plt.plot(V_RK, color = "darkblue", label = "Velocity along y-axis")
plt.legend()
plt.xlabel(r"$u$ [AU/yr]")
plt.ylabel(r"$v$ [AU/yr]")
plt.grid()
plt.show()

plt.figure()
plt.title("Total energy per unit mass, RK")
plt.plot(E_RK, color = "crimson", label = "Total energy")
plt.xlabel(r"$n$ [?]")
plt.ylabel("Energy [?]")
plt.legend()
plt.grid()
plt.show()

plt.figure()
plt.title("Kinetic and potential energy per unit mass, RK")
plt.plot(Ek_RK, color = "red", label = "Kinetic energy")
plt.plot(abs(Ep_RK), color = "darkorange", label = "Potential energy")
plt.xlabel(r"$n$ [?]")
plt.ylabel("Energy [?]")
plt.legend()
plt.grid()
plt.show()

#EC
plt.figure()
plt.title("Euler-Cromer")
plt.plot(X_EC, Y_EC, color = "crimson", label = "Earth orbit")
plt.plot([0], [0], color = "darkorange", marker = "o", markersize = 19, label = "Fixed sun")
plt.legend(loc = 4)
plt.xlabel(r"$x$ [AU]")
plt.ylabel(r"$y$ [AU]")
plt.grid()
plt.show()

plt.figure()
plt.title("Velocity along x- and y-axis, EC")
plt.plot(U_EC, color = "magenta", label = "Velocity along x-axis")
plt.plot(V_EC, color = "darkblue", label = "Velocity along y-axis")
plt.legend()
plt.xlabel(r"$u$ [AU/yr]")
plt.ylabel(r"$v$ [AU/yr]")
plt.grid()
plt.show()

plt.figure()
plt.title("Total energy per unit mass, EC")
plt.plot(E_EC, color = "crimson", label = "Total energy")
plt.xlabel(r"$n$ [?]")
plt.ylabel("Energy [?]")
plt.legend()
plt.grid()
plt.show()

plt.figure()
plt.title("Kinetic and potential energy per unit mass, EC")
plt.plot(Ek_EC, color = "red", label = "Kinetic energy")
plt.plot(abs(Ep_EC), color = "darkorange", label = "Potential energy")
plt.xlabel(r"$n$ [?]")
plt.ylabel("Energy [?]")
plt.legend()
plt.grid()
plt.show()
