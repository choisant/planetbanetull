# -*- coding: utf-8 -*-
"""
Created on Sat Apr 21 14:41:08 2018

@author: elveb
"""

import numpy as np
import matplotlib.pyplot as plt

T = 0.2408                  #Orbital period [yr] (3.2e7 [s])
R = 0.47                    #Aphelion distance (radius of path) [AU] (1.5e11 [m])
GMs = 4*(np.pi**2)           #Mass of Sun*Gravitaional constant [AU^3/yr^2]
m = (4*(np.pi**2))/332950   #Mass of Earth [AU^3/yr^2] (6.0e24 [kg])
mM = 0.056*m                #Mass of Mercury

t_min = 0
t_max = 0.2408
dt = 0.0001

#RUNGE-KUTTA (4th order)
def F(X_, Y_, U_, V_):          #dX/dt
    return U_

def G(X_, Y_, U_, V_):          #dY/dt
    return V_

def H(X_, Y_, U_, V_):          #dU/dt
    return (-(GMs)/((np.sqrt(X_**2+Y_**2)**3)))*X_

def I(X_, Y_, U_, V_):          #dV/dt
    return (-(GMs)/((np.sqrt(X_**2+Y_**2)**3)))*Y_

def RK(X0, Y0, U0, V0, m, t_min, t_max, tau):    
    dt_RK = tau
    N_RK = int(t_max/dt_RK)+50
    t_RK = np.linspace(t_min, t_max, N_RK)
    
    X_RK = np.zeros(N_RK)   #Position x
    Y_RK = np.zeros(N_RK)   #Position y
    U_RK = np.zeros(N_RK)   #Velocity x
    V_RK = np.zeros(N_RK)   #Velocity y
    E_RK = np.zeros(N_RK)   #Total energy/mass
    Ek_RK = np.zeros(N_RK)  #Kinetic energy
    Ep_RK = np.zeros(N_RK)  #Potential energy
    
    X_RK[0] = X0
    Y_RK[0] = Y0
    U_RK[0] = U0
    V_RK[0] = V0
    Ek_RK[0] = 0.5 * m * np.sqrt(U_RK[0]**2 + V_RK[0]**2)**2
    Ep_RK[0] = -((GMs) * m) / (np.sqrt(X_RK[0]**2 + Y_RK[0]**2))
    E_RK[0] = Ek_RK[0] + Ep_RK[0]
    
    for n in range(N_RK-1):
        k_x1 = dt_RK * F( X_RK[n], Y_RK[n], U_RK[n], V_RK[n] )
        k_y1 = dt_RK * G( X_RK[n], Y_RK[n], U_RK[n], V_RK[n] )
        k_u1 = dt_RK * H( X_RK[n], Y_RK[n], U_RK[n], V_RK[n] )
        k_v1 = dt_RK * I( X_RK[n], Y_RK[n], U_RK[n], V_RK[n] )
        
        k_x2 = dt_RK * F( X_RK[n] + k_x1/2, Y_RK[n] + k_y1/2, U_RK[n] + k_u1/2, V_RK[n] + k_v1/2 )
        k_y2 = dt_RK * G( X_RK[n] + k_x1/2, Y_RK[n] + k_y1/2, U_RK[n] + k_u1/2, V_RK[n] + k_v1/2 )
        k_u2 = dt_RK * H( X_RK[n] + k_x1/2, Y_RK[n] + k_y1/2, U_RK[n] + k_u1/2, V_RK[n] + k_v1/2 )
        k_v2 = dt_RK * I( X_RK[n] + k_x1/2, Y_RK[n] + k_y1/2, U_RK[n] + k_u1/2, V_RK[n] + k_v1/2 )
        
        k_x3 = dt_RK * F( X_RK[n] + k_x2/2, Y_RK[n] + k_y2/2, U_RK[n] + k_u2/2, V_RK[n] + k_v2/2 )
        k_y3 = dt_RK * G( X_RK[n] + k_x2/2, Y_RK[n] + k_y2/2, U_RK[n] + k_u2/2, V_RK[n] + k_v2/2 )
        k_u3 = dt_RK * H( X_RK[n] + k_x2/2, Y_RK[n] + k_y2/2, U_RK[n] + k_u2/2, V_RK[n] + k_v2/2 )
        k_v3 = dt_RK * I( X_RK[n] + k_x2/2, Y_RK[n] + k_y2/2, U_RK[n] + k_u2/2, V_RK[n] + k_v2/2 )
        
        k_x4 = dt_RK * F( X_RK[n] + k_x3, Y_RK[n] + k_y3, U_RK[n] + k_u3, V_RK[n] + k_v3 )
        k_y4 = dt_RK * G( X_RK[n] + k_x3, Y_RK[n] + k_y3, U_RK[n] + k_u3, V_RK[n] + k_v3 )
        k_u4 = dt_RK * H( X_RK[n] + k_x3, Y_RK[n] + k_y3, U_RK[n] + k_u3, V_RK[n] + k_v3 )
        k_v4 = dt_RK * I( X_RK[n] + k_x3, Y_RK[n] + k_y3, U_RK[n] + k_u3, V_RK[n] + k_v3 )
        
        X_RK[n+1] = X_RK[n] + k_x1/6 + k_x2/3 + k_x3/3 + k_x4/6
        Y_RK[n+1] = Y_RK[n] + k_y1/6 + k_y2/3 + k_y3/3 + k_y4/6
        U_RK[n+1] = U_RK[n] + k_u1/6 + k_u2/3 + k_u3/3 + k_u4/6
        V_RK[n+1] = V_RK[n] + k_v1/6 + k_v2/3 + k_v3/3 + k_v4/6
        
        Ek_RK[n+1] = 0.5 * m * np.sqrt(U_RK[n+1]**2 + V_RK[n+1]**2)**2
        Ep_RK[n+1] = -((GMs) * m) / (np.sqrt(X_RK[n+1]**2 + Y_RK[n+1]**2))
        E_RK[n+1] = Ek_RK[n+1] + Ep_RK[n+1]
    
    return X_RK, Y_RK, U_RK, V_RK, E_RK, Ek_RK, Ep_RK, t_RK

RK = RK(R, 0, 0, 8.2, mM, t_min, t_max, dt)

plt.figure()
plt.title("Position of Mercury around the Sun")
plt.plot(RK[0], RK[1], color = "maroon", label = "Mercury orbit")
plt.plot([0], [0], color = "darkorange", marker="o", markersize = 19, label = "Fixed Sun")
plt.legend(loc = 4)
plt.xlabel(r"$x$ [AU]")
plt.ylabel(r"$y$ [AU]")
plt.grid()
#plt.savefig("/Users/elveb/Documents/2_1_1.pdf")
plt.show()

plt.title("Velocity as a function of time")
plt.plot(RK[-1], RK[2], label = "Velocity in x-direction", color = "darkorange")
plt.plot(RK[-1], RK[3], label = "Velocity in y-direction", color = "red")
plt.plot(RK[-1], np.sqrt(RK[2]**2+RK[3]**2), label = "Absolute velocity", color = "maroon")
plt.xlabel(r"$t$ [s]")
plt.ylabel(r"$v$ [AU/yr]")
plt.grid()
plt.legend()
#plt.savefig("/Users/elveb/Documents/2_1_2.pdf")
plt.show()

plt.title("Energy as a function of time")
plt.plot(RK[-1], RK[5], label = "Kinetic energy", color = "darkorange")
plt.plot(RK[-1], RK[6], label = "Potential energy", color = "red")
plt.plot(RK[-1], RK[4], label = "Total energy", color = "maroon")
plt.xlabel(r"$t$ [s]")
plt.ylabel(r"$E$ [AU$^5$/yr$^4$]")
plt.grid()
plt.legend()
#plt.savefig("/Users/elveb/Documents/2_1_3.pdf")
plt.show()
