import numpy as np
import matplotlib.pyplot as plt

T = 1                       #Orbital period [yr] (3.2e7 [s])
R = (6371+322)*10**3                       #Aphelion distance (radius of path) [AU] (1.5e11 [m])
G = 6.67*10**(-11)        #Mass of Sun*Gravitaional constant [AU^3/yr^2]
mE = 6*10**24  #Mass of Earth [AU^3/yr^2] (6.0e24 [kg])
mS = 720

C = -(G*mE)

#Initial conditions
X0 = R
Y0 = 0
U0 = 0
V0 = np.sqrt(abs(C)/R)

t_max = 2*3.14*R/V0
dt = 0.1             #time step / tau
N = int(t_max/dt)
t=np.linspace(0,t_max,N)

#RUNGE-KUTTA (4th order)
def F(X_, Y_, U_, V_):  #dX/dt
  return U_

def G(X_, Y_, U_, V_):  #dY/dt
  return V_

def H(X_, Y_, U_, V_):  #dU/dt
    return C * ((X_**2+Y_**2)**(-3/2)) * X_ 

def I(X_, Y_, U_, V_): #dV/dt
    return C * ((X_**2+Y_**2)**(-3/2))*Y_

X_RK = np.zeros(N)
Y_RK = np.zeros(N)
U_RK = np.zeros(N)
V_RK = np.zeros(N)
E_RK = np.zeros(N)    #Total energy/mass
Ek_RK = np.zeros(N)   #Kinetic energy
Ep_RK = np.zeros(N)   #Potential energy

X_RK[0] = X0
Y_RK[0] = Y0
U_RK[0] = U0
V_RK[0] = V0
Ek_RK[0] = 0.5 * mS *(U_RK[0]**2 + V_RK[0]**2)
Ep_RK[0] = C * mS / (np.sqrt(X_RK[0]**2 + Y_RK[0]**2))
E_RK[0]=Ek_RK[0]+Ep_RK[0]

for n in range(N-1):
  print(n)
  k_x1 = dt * F( X_RK[n], Y_RK[n], U_RK[n], V_RK[n] )
  k_y1 = dt * G( X_RK[n], Y_RK[n], U_RK[n], V_RK[n] )
  k_u1 = dt * H( X_RK[n], Y_RK[n], U_RK[n], V_RK[n] )
  k_v1 = dt * I( X_RK[n], Y_RK[n], U_RK[n], V_RK[n] )
    
  k_x2 = dt * F( X_RK[n] + k_x1/2, Y_RK[n] + k_y1/2, U_RK[n] + k_u1/2, V_RK[n] + k_v1/2 )
  k_y2 = dt * G( X_RK[n] + k_x1/2, Y_RK[n] + k_y1/2, U_RK[n] + k_u1/2, V_RK[n] + k_v1/2 )
  k_u2 = dt * H( X_RK[n] + k_x1/2, Y_RK[n] + k_y1/2, U_RK[n] + k_u1/2, V_RK[n] + k_v1/2 )
  k_v2 = dt * I( X_RK[n] + k_x1/2, Y_RK[n] + k_y1/2, U_RK[n] + k_u1/2, V_RK[n] + k_v1/2 )
    
  k_x3 = dt * F( X_RK[n] + k_x2/2, Y_RK[n] + k_y2/2, U_RK[n] + k_u2/2, V_RK[n] + k_v2/2 )
  k_y3 = dt * G( X_RK[n] + k_x2/2, Y_RK[n] + k_y2/2, U_RK[n] + k_u2/2, V_RK[n] + k_v2/2 )
  k_u3 = dt * H( X_RK[n] + k_x2/2, Y_RK[n] + k_y2/2, U_RK[n] + k_u2/2, V_RK[n] + k_v2/2 )
  k_v3 = dt * I( X_RK[n] + k_x2/2, Y_RK[n] + k_y2/2, U_RK[n] + k_u2/2, V_RK[n] + k_v2/2 )
    
  k_x4 = dt * F( X_RK[n] + k_x3, Y_RK[n] + k_y3, U_RK[n] + k_u3, V_RK[n] + k_v3 )
  k_y4 = dt * G( X_RK[n] + k_x3, Y_RK[n] + k_y3, U_RK[n] + k_u3, V_RK[n] + k_v3 )
  k_u4 = dt * H( X_RK[n] + k_x3, Y_RK[n] + k_y3, U_RK[n] + k_u3, V_RK[n] + k_v3 )
  k_v4 = dt * I( X_RK[n] + k_x3, Y_RK[n] + k_y3, U_RK[n] + k_u3, V_RK[n] + k_v3 )
    
  X_RK[n+1] = X_RK[n] + k_x1/6 + k_x2/3 + k_x3/3 + k_x4/6
  Y_RK[n+1] = Y_RK[n] + k_y1/6 + k_y2/3 + k_y3/3 + k_y4/6
  U_RK[n+1] = U_RK[n] + k_u1/6 + k_u2/3 + k_u3/3 + k_u4/6
  V_RK[n+1] = V_RK[n] + k_v1/6 + k_v2/3 + k_v3/3 + k_v4/6

  Ek_RK[n+1] = 0.5 * mS * (U_RK[n+1]**2 + V_RK[n+1]**2)
  Ep_RK[n+1] = C*mS / (np.sqrt(X_RK[n+1]**2 + Y_RK[n+1]**2))
  E_RK[n+1] = Ek_RK[n+1] + Ep_RK[n+1]
  

#Plots_______________________________________________

#RK
plt.figure()
plt.title("4th order Runge-Kutta")
plt.plot(X_RK/1000, Y_RK/1000, color = "crimson", label = "Satellite orbit")
plt.axis("equal")
plt.plot([0], [0], color = "darkblue", marker = "o", markersize = 200)
plt.legend(loc = 4)
plt.xlabel(r"$x$ [km]")
plt.ylabel(r"$y$ [km]")
plt.grid()
plt.show()

plt.figure()
plt.title("Velocity along x- and y-axis, RK")
plt.plot(t,U_RK, color = "magenta", label = "Velocity along x-axis")
plt.plot(t,V_RK, color = "darkblue", label = "Velocity along y-axis")
plt.plot(t,np.sqrt(V_RK**2+U_RK**2), color = "green", label = "Velocity along y-axis")
plt.legend()
plt.xlabel("Time / s")
plt.ylabel(r"$v$ / ms^(-1)")
plt.grid()
plt.show()

plt.figure()
plt.title("Kinetic and potential energy per unit mass, RK")
plt.plot(t,Ek_RK, color = "red", label = "Kinetic energy")
plt.plot(t,Ep_RK, color = "darkorange", label = "Potential energy")
plt.plot(t,E_RK, color = "crimson", label = "Total energy")
plt.xlabel("Time / s")
plt.ylabel("Energy / J")
plt.legend()
plt.grid()
plt.show()
