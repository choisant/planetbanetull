# -*- coding: utf-8 -*-
"""
Created on Wed Apr 11 12:03:41 2018

@author: aurora og tiril
"""

import numpy as np
import matplotlib.pyplot as plt

T_E = 1                       #Orbital period [yr] (3.2e7 [s])
R_E = 1                 #Aphelion distance (radius of path) [AU] (1.5e11 [m])
GM = 4*(np.pi**2)           #Mass of Sun*Gravitaional constant [AU^3/yr^2]
m_E1 = (4*(np.pi**2))/332950   #Mass of Earth [AU^3/yr^2] (6.0e24 [kg])
#m_E = (4*(np.pi**2))/332950 #mass of Earth
#m_E = 317.89*m_E1 #mass of Jupiter
m_E = 317.89*m_E1*5
alpha_E1 = 1/332950
#alpha_E = 1/332950 alpha Earth
#alpha_E = 317.89*alpha_E1 #alpha of jupiter
alpha_E = 317.89*alpha_E1*5 #alpha of funny

T_M = 1.88809                      #Orbital period [yr] (3.2e7 [s])
R_M = 1.52                      #Aphelion distance (radius of path) [AU] (1.5e11 [m])
#m_M = m_E*0.1074   #mass of Mars
m_M = 317.89*m_E1 #Mass of Jupiter 
m_M = 317.89*m_E1*50 #funny mass
#alpha_M = 0.107*alpha_E #alpha Mars
#alpha_M = 317.89*alpha_E1 #alpha of jupiter
alpha_M = 317.89*alpha_E1*50 #alpha of funny things

#C = -(GM)/(R_E**3)

#Initial conditions Earth
X0_E = R_E
Y0_E = 0
U0_E = 0
V0_E = 2*np.pi

#Initial conditions
X0_M = R_M
Y0_M = 0
U0_M = 0
V0_M = 2*np.pi*(R_M/T_M)

t_min = 0
t_max = 1
dt = 0.01             #time step / tau #RK=0.0001
N = int(t_max/dt)*3
t = np.linspace(t_min, t_max, N)

#RUNGE-KUTTA (4th order)
def F_E(X_, Y_, U_, V_):  #dX/dt
  return U_

def G_E(X_, Y_, U_, V_):  #dY/dt
  return V_

def H_E(X_e, Y_e, U_e, V_e, X_m, Y_m):  #dU/dt
  return -GM*X_e/(np.sqrt(X_e**2+Y_e**2)**3)-GM*alpha_M*(X_e-X_m)/((np.sqrt((X_e-X_m)**2+(Y_e-Y_m)**2)**3))

def I_E(X_e, Y_e, U_e, V_e, X_m, Y_m): #dV/dt
    return -GM*Y_e/(np.sqrt(Y_e**2+X_e**2)**3)-GM*alpha_M*(Y_e-Y_m)/((np.sqrt((X_e-X_m)**2+(Y_e-Y_m)**2)**3))

def F_M(X_, Y_, U_, V_):  #dX/dt
  return U_

def G_M(X_, Y_, U_, V_):  #dY/dt
  return V_

def H_M(X_m, Y_m, U_m, V_m, X_e, Y_e):  #dU/dt
  return -GM*X_m/(np.sqrt(X_m**2+Y_m**2)**3)-GM*alpha_E*(X_m-X_e)/((np.sqrt((X_m-X_e)**2+(Y_m-Y_e)**2)**3))

def I_M(X_m, Y_m, U_m, V_m, X_e, Y_e):  #dU/dt
  return -GM*Y_m/(np.sqrt(X_m**2+Y_m**2)**3)-GM*alpha_E*(Y_m-Y_e)/((np.sqrt((X_m-X_e)**2+(Y_m-Y_e)**2)**3))

X_E = np.zeros(N)
Y_E = np.zeros(N)
U_E = np.zeros(N)
V_E = np.zeros(N)
E_E = np.zeros(N)    #Total energy/mass
Ek_E = np.zeros(N)   #Kinetic energy
Ep_E = np.zeros(N)   #Potential energy

X_E[0] = X0_E
Y_E[0] = Y0_E
U_E[0] = U0_E
V_E[0] = V0_E
Ek_E[0] = 0.5 * m_E * np.sqrt(U_E[0]**2 + V_E[0]**2)**2
Ep_E[0] = -((GM) * m_E) / (np.sqrt(X_E[0]**2 + Y_E[0]**2))
E_E[0] = Ek_E[0] + Ep_E[0]

X_M = np.zeros(N)
Y_M = np.zeros(N)
U_M = np.zeros(N)
V_M = np.zeros(N)
E_M = np.zeros(N)    #Total energy/mass
Ek_M = np.zeros(N)   #Kinetic energy
Ep_M = np.zeros(N)   #Potential energy

X_M[0] = X0_M
Y_E[0] = Y0_M
U_M[0] = U0_M
V_M[0] = V0_M
Ek_M[0] = 0.5 * m_M * np.sqrt(U_E[0]**2 + V_E[0]**2)**2
Ep_M[0] = -((GM) * m_M) / (np.sqrt(X_E[0]**2 + Y_E[0]**2))
E_M[0] = Ek_E[0] + Ep_E[0]

def RungeKutta(X1,Y1,U1,V1,X2,Y2,A,B,C,D) :
  k_x1 = dt * A(X1, Y1, U1, V1)
  k_y1 = dt * B(X1, Y1, U1, V1)
  k_u1 = dt * C(X1, Y1, U1, V1,X2,Y2)
  k_v1 = dt * D(X1, Y1, U1, V1,X2,Y2)
    
  k_x2 = dt * A( X1 + k_x1/2, Y1 + k_y1/2, U1 + k_u1/2, V1 + k_v1/2)
  k_y2 = dt * B( X1 + k_x1/2, Y1 + k_y1/2, U1 + k_u1/2, V1 + k_v1/2)
  k_u2 = dt * C( X1 + k_x1/2, Y1 + k_y1/2, U1 + k_u1/2, V1 + k_v1/2, X2 + k_v1/2, Y2 + k_v1/2)
  k_v2 = dt * D( X1 + k_x1/2, Y1 + k_y1/2, U1 + k_u1/2, V1 + k_v1/2, X2 + k_v1/2, Y2 + k_v1/2)
    
  k_x3 = dt * A( X1 + k_x2/2, Y1 + k_y2/2, U1 + k_u2/2, V1 + k_v2/2 )
  k_y3 = dt * B( X1 + k_x2/2, Y1 + k_y2/2, U1 + k_u2/2, V1 + k_v2/2 )
  k_u3 = dt * C( X1 + k_x2/2, Y1 + k_y2/2, U1 + k_u2/2, V1 + k_v2/2, X2 + k_v2/2, Y2 + k_v2/2 )
  k_v3 = dt * D( X1 + k_x2/2, Y1 + k_y2/2, U1 + k_u2/2, V1 + k_v2/2, X2 + k_v2/2, Y2 + k_v2/2 )
    
  k_x4 = dt * A( X1 + k_x3, Y1 + k_y3, U1 + k_u3, V1 + k_v3 )
  k_y4 = dt * B( X1 + k_x3, Y1 + k_y3, U1 + k_u3, V1 + k_v3 )
  k_u4 = dt * C( X1 + k_x3, Y1 + k_y3, U1 + k_u3, V1 + k_v3, X2 + k_v3, Y2 + k_v3 )
  k_v4 = dt * D( X1 + k_x3, Y1 + k_y3, U1 + k_u3, V1 + k_v3, X2 + k_v3, Y2 + k_v3 )
    
  X_new = X1 + k_x1/6 + k_x2/3 + k_x3/3 + k_x4/6
  Y_new = Y1 + k_y1/6 + k_y2/3 + k_y3/3 + k_y4/6
  U_new = U1 + k_u1/6 + k_u2/3 + k_u3/3 + k_u4/6
  V_new = V1 + k_v1/6 + k_v2/3 + k_v3/3 + k_v4/6
    
  return X_new, Y_new, U_new, V_new

for n in range(N-1):
  X_E[n+1],Y_E[n+1],U_E[n+1],V_E[n+1]=RungeKutta(X_E[n],Y_E[n],U_E[n],V_E[n],X_M[n],Y_M[n],F_E,G_E,H_E,I_E)
  X_M[n+1],Y_M[n+1],U_M[n+1],V_M[n+1]=RungeKutta(X_M[n],Y_M[n],U_M[n],V_M[n],X_E[n],Y_E[n],F_M,G_M,H_M,I_M)
  
  Ek_M[n+1] = 0.5 * m_M * np.sqrt(U_M[n+1]**2 + V_M[n+1]**2)**2
  Ep_M[n+1] = -((GM) * m_M) / (np.sqrt(X_M[n+1]**2 + Y_M[n+1]**2))
  E_M[n+1] = Ek_M[n+1] + Ep_M[n+1]

  Ek_E[n+1] = 0.5 * m_E * np.sqrt(U_E[n+1]**2 + V_E[n+1]**2)**2
  Ep_E[n+1] = -((GM) * m_E) / (np.sqrt(X_E[n+1]**2 + Y_E[n+1]**2))
  E_E[n+1] = Ek_E[n+1] + Ep_E[n+1]

#Plots_______________________________________________

#RK
plt.figure()
plt.title("Position of Earth and Mars with RK-algorithm")
plt.plot(X_E, Y_E, color = "olive", label = "Earth orbit")
plt.plot(X_M, Y_M, color = "maroon", label = "Mars orbit")
plt.plot([0], [0], color = "darkorange", marker = "o", markersize = 19, label = "Fixed sun")
plt.legend(loc = 4)
plt.xlabel(r"$x$ [AU]")
plt.ylabel(r"$y$ [AU]")
plt.axis("equal")
plt.grid()
#plt.savefig("/Users/elveb/Documents/RK_1.pdf")
plt.show()

velo = np.sqrt(U_E**2+V_E**2)
plt.title("Velocity of Earth as function of time, RK", y=1.05)
plt.plot(t, velo, color = "olive", label = "Absolute velocity")
plt.plot(t, U_E, color = "teal", label = "Velocity along y-axis")
plt.plot(t, V_E, color = "darkblue", label = "Velocity along y-axis")
plt.legend()
plt.xlabel(r"$t$ [yr]")
plt.ylabel(r"$v$ [AU/yr]")
plt.grid()
#plt.savefig("/Users/elveb/Documents/RK_2.pdf")
plt.show()

plt.title("Energy of Earth as function of time, RK")
plt.plot(t, E_E, color = "olive", label = "Total energy")
plt.plot(t, Ek_E, color = "teal", label = "Kinetic energy")
plt.plot(t, Ep_E, color = "darkblue", label = "Potential energy")
plt.xlabel(r"$t$ [yr]")
plt.ylabel("Energy [AU^5 / yr^4]")
plt.legend()
plt.grid()
#plt.savefig("/Users/elveb/Documents/RK_3.pdf")
plt.show()


velo = np.sqrt(U_E**2+V_E**2)
plt.title("Velocity of Mars as function of time, RK", y=1.05)
plt.plot(t, velo, color = "olive", label = "Absolute velocity")
plt.plot(t, U_M, color = "teal", label = "Velocity along y-axis")
plt.plot(t, V_M, color = "darkblue", label = "Velocity along y-axis")
plt.legend()
plt.xlabel(r"$t$ [yr]")
plt.ylabel(r"$v$ [AU/yr]")
plt.grid()
#plt.savefig("/Users/elveb/Documents/RK_2.pdf")
plt.show()

plt.title("Energy of Mars as function of time, RK")
plt.plot(t, E_M, color = "olive", label = "Total energy")
plt.plot(t, Ek_M, color = "teal", label = "Kinetic energy")
plt.plot(t, Ep_M, color = "darkblue", label = "Potential energy")
plt.xlabel(r"$t$ [yr]")
plt.ylabel("Energy [AU^5 / yr^4]")
plt.legend()
plt.grid()
#plt.savefig("/Users/elveb/Documents/RK_3.pdf")
plt.show()
