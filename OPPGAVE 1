# -*- coding: utf-8 -*-
"""
Created on Wed Apr 18 12:11:19 2018

@author: elveb
"""
import numpy as np
import matplotlib.pyplot as plt

T = 1                           #Orbital period [yr] (3.2e7 [s])
R = 1                           #Aphelion distance (radius of path) [AU] (1.5e11 [m])
GMs = 4*(np.pi**2)              #Mass of Sun*Gravitaional constant [AU^3/yr^2]
Me = (4*(np.pi**2))/332950      #Mass of Earth [AU^3/yr^2] (6.0e24 [kg])

#RUNGE-KUTTA (4th order)
def F(X_, Y_, U_, V_):          #dX/dt
    return U_

def G(X_, Y_, U_, V_):          #dY/dt
    return V_

def H(X_, Y_, U_, V_):          #dU/dt
    return (-(GMs)/((np.sqrt(X_**2+Y_**2)**3)))*X_

def I(X_, Y_, U_, V_):          #dV/dt
    return (-(GMs)/((np.sqrt(X_**2+Y_**2)**3)))*Y_

def RK(X0, Y0, U0, V0, m, t_min, t_max, tau):    
    dt_RK = tau
    N_RK = int(t_max/dt_RK)
    t_RK = np.linspace(t_min, t_max, N_RK)
    
    X_RK = np.zeros(N_RK)   #Position x
    Y_RK = np.zeros(N_RK)   #Position y
    U_RK = np.zeros(N_RK)   #Velocity x
    V_RK = np.zeros(N_RK)   #Velocity y
    E_RK = np.zeros(N_RK)   #Total energy/mass
    Ek_RK = np.zeros(N_RK)  #Kinetic energy
    Ep_RK = np.zeros(N_RK)  #Potential energy
    
    X_RK[0] = X0
    Y_RK[0] = Y0
    U_RK[0] = U0
    V_RK[0] = V0
    Ek_RK[0] = 0.5 * m * np.sqrt(U_RK[0]**2 + V_RK[0]**2)**2
    Ep_RK[0] = -((GMs) * m) / (np.sqrt(X_RK[0]**2 + Y_RK[0]**2))
    E_RK[0] = Ek_RK[0] + Ep_RK[0]
    
    for n in range(N_RK-1):
        k_x1 = dt_RK * F( X_RK[n], Y_RK[n], U_RK[n], V_RK[n] )
        k_y1 = dt_RK * G( X_RK[n], Y_RK[n], U_RK[n], V_RK[n] )
        k_u1 = dt_RK * H( X_RK[n], Y_RK[n], U_RK[n], V_RK[n] )
        k_v1 = dt_RK * I( X_RK[n], Y_RK[n], U_RK[n], V_RK[n] )
        
        k_x2 = dt_RK * F( X_RK[n] + k_x1/2, Y_RK[n] + k_y1/2, U_RK[n] + k_u1/2, V_RK[n] + k_v1/2 )
        k_y2 = dt_RK * G( X_RK[n] + k_x1/2, Y_RK[n] + k_y1/2, U_RK[n] + k_u1/2, V_RK[n] + k_v1/2 )
        k_u2 = dt_RK * H( X_RK[n] + k_x1/2, Y_RK[n] + k_y1/2, U_RK[n] + k_u1/2, V_RK[n] + k_v1/2 )
        k_v2 = dt_RK * I( X_RK[n] + k_x1/2, Y_RK[n] + k_y1/2, U_RK[n] + k_u1/2, V_RK[n] + k_v1/2 )
        
        k_x3 = dt_RK * F( X_RK[n] + k_x2/2, Y_RK[n] + k_y2/2, U_RK[n] + k_u2/2, V_RK[n] + k_v2/2 )
        k_y3 = dt_RK * G( X_RK[n] + k_x2/2, Y_RK[n] + k_y2/2, U_RK[n] + k_u2/2, V_RK[n] + k_v2/2 )
        k_u3 = dt_RK * H( X_RK[n] + k_x2/2, Y_RK[n] + k_y2/2, U_RK[n] + k_u2/2, V_RK[n] + k_v2/2 )
        k_v3 = dt_RK * I( X_RK[n] + k_x2/2, Y_RK[n] + k_y2/2, U_RK[n] + k_u2/2, V_RK[n] + k_v2/2 )
        
        k_x4 = dt_RK * F( X_RK[n] + k_x3, Y_RK[n] + k_y3, U_RK[n] + k_u3, V_RK[n] + k_v3 )
        k_y4 = dt_RK * G( X_RK[n] + k_x3, Y_RK[n] + k_y3, U_RK[n] + k_u3, V_RK[n] + k_v3 )
        k_u4 = dt_RK * H( X_RK[n] + k_x3, Y_RK[n] + k_y3, U_RK[n] + k_u3, V_RK[n] + k_v3 )
        k_v4 = dt_RK * I( X_RK[n] + k_x3, Y_RK[n] + k_y3, U_RK[n] + k_u3, V_RK[n] + k_v3 )
        
        X_RK[n+1] = X_RK[n] + k_x1/6 + k_x2/3 + k_x3/3 + k_x4/6
        Y_RK[n+1] = Y_RK[n] + k_y1/6 + k_y2/3 + k_y3/3 + k_y4/6
        U_RK[n+1] = U_RK[n] + k_u1/6 + k_u2/3 + k_u3/3 + k_u4/6
        V_RK[n+1] = V_RK[n] + k_v1/6 + k_v2/3 + k_v3/3 + k_v4/6
        
        Ek_RK[n+1] = 0.5 * Me * np.sqrt(U_RK[n+1]**2 + V_RK[n+1]**2)**2
        Ep_RK[n+1] = -((GMs) * m) / (np.sqrt(X_RK[n+1]**2 + Y_RK[n+1]**2))
        E_RK[n+1] = Ek_RK[n+1] + Ep_RK[n+1]
    
    return X_RK, Y_RK, U_RK, V_RK, E_RK, Ek_RK, Ep_RK, t_RK

#EULER-CROMER
def EC(X0, Y0, U0, V0, m, t_min, t_max, tau):    
    dt_EC = tau
    N_EC = int(t_max/dt_EC)
    t_EC = np.linspace(t_min, t_max, N_EC) 
    
    X_EC = np.zeros(N_EC)
    Y_EC = np.zeros(N_EC)
    U_EC = np.zeros(N_EC)
    V_EC = np.zeros(N_EC)
    E_EC = np.zeros(N_EC)           #Total energy
    Ek_EC = np.zeros(N_EC)          #Kinetic energy
    Ep_EC = np.zeros(N_EC)          #Potential energy
    
    X_EC[0] = X0
    Y_EC[0] = Y0
    U_EC[0] = U0
    V_EC[0] = V0
    Ek_EC[0] = 0.5 * m * (U_EC[0]**2 + V_EC[0]**2)
    Ep_EC[0] = -((GMs)*m) / np.sqrt(X_EC[0]**2 + Y_EC[0]**2)
    E_EC[0] = Ek_EC[0] + Ep_EC[0]
    
    for n in range(N_EC-1):
        U_EC[n+1] = U_EC[n] + (dt_EC * ((-GMs)*X_EC[n]) * (X_EC[n]**2 + Y_EC[n]**2)**(-3/2))
        X_EC[n+1] = X_EC[n] + dt_EC * U_EC[n+1]
        V_EC[n+1] = V_EC[n] + (dt_EC * ((-GMs)*Y_EC[n]) * (X_EC[n]**2 + Y_EC[n]**2)**(-3/2))
        Y_EC[n+1] = Y_EC[n] + dt_EC * V_EC[n+1]
        
        Ek_EC[n+1] = 0.5 * m * (U_EC[n+1]**2 + V_EC[n+1]**2)
        Ep_EC[n+1] = -(GMs*m) / np.sqrt(X_EC[n+1]**2 + Y_EC[n+1]**2)
        E_EC[n+1] = Ek_EC[n+1] + Ep_EC[n+1]  
    
    return X_EC, Y_EC, U_EC, V_EC, E_EC, Ek_EC, Ep_EC, t_EC
      
#Tasks & Plots_________________________________________________________________
#OBS! THE TASKS MUST BE RUN ONE BY ONE, NOT AT THE SAME TIME
"""
#TASK 1.1----------------------------------------------------------------------
#Initial conditions, Earth: X0 = 1, Y0 = 0, U0 = 0, V0 = 2*np.pi
RK = RK(1, 0, 0, 2*np.pi, Me, 0, 1, 0.001) 
EC = EC(1, 0, 0, 2*np.pi, Me, 0, 1, 0.00001)

#RK   
plt.figure()
plt.title("Position of Earth with RK-algorithm")
plt.plot(RK[0], RK[1], color = "darkblue", label = "Earth orbit")
plt.plot([0], [0], color = "darkorange", marker = "o", markersize = 19, label = "Fixed sun")
plt.legend(loc = 4)
plt.xlabel(r"$x$ [AU]")
plt.ylabel(r"$y$ [AU]")
plt.axis("equal")
plt.grid()
#plt.savefig("/Users/elveb/Documents/1_RK_pos.pdf")
plt.show()

#EC
plt.figure()
plt.title("Position of Earth with EC-algorithm")
plt.plot(EC[0], EC[1], color = "teal", label = "Earth orbit")
plt.plot([0], [0], color = "darkorange", marker = "o", markersize = 19, label = "Fixed sun")
plt.legend(loc = 4)
plt.xlabel(r"$x$ [AU]")
plt.ylabel(r"$y$ [AU]")
plt.axis("equal")
plt.grid()
#plt.savefig("/Users/elveb/Documents/1_EC_pos.pdf")
plt.show()

#VELOCITY
fig = plt.figure(figsize=(8, 2))
plt.title("Absolute velocity as a function of time")
plt.plot(RK[-1], np.sqrt(RK[2]**2+RK[3]**2), label = "RK", color = "darkblue")
plt.plot(EC[-1], np.sqrt(EC[2]**2+EC[3]**2), label = "EC", color = "teal")
plt.xlabel(r"$t$ [yr]")
plt.ylabel(r"$v$ [AU/yr]")
plt.legend()
plt.grid()
#plt.savefig("/Users/elveb/Documents/1_velo.pdf")
plt.show()

#ENERGY
fig = plt.figure(figsize=(8, 2))
plt.title("Total energy as a function of time")
plt.plot(RK[-1], RK[4], label = "RK", color = "crimson")
plt.plot(EC[-1], EC[4], label = "EC", color = "orange")
plt.xlabel(r"$t$ [yr]")
plt.ylabel(r"$Etot$ [AU$^5$ / yr$^4$]")
plt.legend()
plt.grid()
#plt.savefig("/Users/elveb/Documents/1_Etot.pdf")
plt.show()

fig = plt.figure(figsize=(8, 2))
plt.title("Kinetic energy as a function of time")
plt.plot(RK[-1], RK[5], label = "RK", color = "crimson")
plt.plot(EC[-1], EC[5], label = "EC", color = "orange")
plt.xlabel(r"$t$ [yr]")
plt.ylabel(r"$Ek$ [AU$^5$ / yr$^4$]")
plt.legend()
plt.grid()
#plt.savefig("/Users/elveb/Documents/1_Ek.pdf")
plt.show()

fig = plt.figure(figsize=(8, 2))
plt.title("Potential energy as a function of time")
plt.plot(RK[-1], RK[6], label = "RK", color = "crimson")
plt.plot(EC[-1], EC[6], label = "EC", color = "orange")
plt.xlabel(r"$t$ [yr]")
plt.ylabel(r"$Ep$ [AU$^5$ / yr$^4$]")
plt.legend(loc = 4)
plt.grid()
#plt.savefig("/Users/elveb/Documents/1_Ep.pdf")
plt.show()
"""
"""
#TASK 1.2----------------------------------------------------------------------
tau = np.linspace(0.001, 0.1, 20)
#print(tau)
E_diff_RK = np.zeros(len(tau))      #Energy difference for one orbit, RK
E_diff_EC = np.zeros(len(tau))      #Energy difference for one orbit, EC

for m in range(len(tau)):
    a = RK(1, 0, 0, 2*np.pi, Me, 0, 1, tau[m])
    b = EC(1, 0, 0, 2*np.pi, Me, 0, 1, tau[m])
   
    E_diff_RK[m] = abs(a[4][-1] - a[4][0])
    E_diff_EC[m] = abs(b[4][-1] - b[4][0])

plt.figure()
plt.plot(tau, abs(E_diff_RK), color = "darkblue", label = "RK")
plt.plot(tau, abs(E_diff_EC), color = "teal", label = "EC")
plt.title("Energy difference for one orbit as function of tau")
plt.xlabel(r"$\tau$")
plt.ylabel(r"$E$ [AU$^4$ / yr$^5$]")
plt.legend()
plt.grid()
#plt.savefig("/Users/elveb/Documents/1_2.pdf")
plt.show()
"""
"""
#TASK 1.3----------------------------------------------------------------------
radius = np.linspace(0.5, 35, 10)
period = np.zeros(len(radius))
count = 0

for r in radius:
    X0 = r
    Y0 = 0
    U0 = 0
    V0 = np.sqrt(GMs/r)

    tol = 0.005 #[AU]
    time = 0

    t_min = 0
    t_max = 4*np.pi*r/V0
    dt_RK = 0.01                   #time step / tau #RK=0.0001
    N_RK = int(t_max/dt_RK)
    t_RK = np.linspace(t_min, t_max, N_RK)

    X_RK = np.zeros(N_RK)
    Y_RK = np.zeros(N_RK)
    U_RK = np.zeros(N_RK)
    V_RK = np.zeros(N_RK)
    X_RK[0] = X0
    Y_RK[0] = Y0
    U_RK[0] = U0
    V_RK[0] = V0

    switch = False
    
    for n in range(N_RK-1):
        k_x1 = dt_RK * F( X_RK[n], Y_RK[n], U_RK[n], V_RK[n] )
        k_y1 = dt_RK * G( X_RK[n], Y_RK[n], U_RK[n], V_RK[n] )
        k_u1 = dt_RK * H( X_RK[n], Y_RK[n], U_RK[n], V_RK[n] )
        k_v1 = dt_RK * I( X_RK[n], Y_RK[n], U_RK[n], V_RK[n] )
        
        k_x2 = dt_RK * F( X_RK[n] + k_x1/2, Y_RK[n] + k_y1/2, U_RK[n] + k_u1/2, V_RK[n] + k_v1/2 )
        k_y2 = dt_RK * G( X_RK[n] + k_x1/2, Y_RK[n] + k_y1/2, U_RK[n] + k_u1/2, V_RK[n] + k_v1/2 )
        k_u2 = dt_RK * H( X_RK[n] + k_x1/2, Y_RK[n] + k_y1/2, U_RK[n] + k_u1/2, V_RK[n] + k_v1/2 )
        k_v2 = dt_RK * I( X_RK[n] + k_x1/2, Y_RK[n] + k_y1/2, U_RK[n] + k_u1/2, V_RK[n] + k_v1/2 )
        
        k_x3 = dt_RK * F( X_RK[n] + k_x2/2, Y_RK[n] + k_y2/2, U_RK[n] + k_u2/2, V_RK[n] + k_v2/2 )
        k_y3 = dt_RK * G( X_RK[n] + k_x2/2, Y_RK[n] + k_y2/2, U_RK[n] + k_u2/2, V_RK[n] + k_v2/2 )
        k_u3 = dt_RK * H( X_RK[n] + k_x2/2, Y_RK[n] + k_y2/2, U_RK[n] + k_u2/2, V_RK[n] + k_v2/2 )
        k_v3 = dt_RK * I( X_RK[n] + k_x2/2, Y_RK[n] + k_y2/2, U_RK[n] + k_u2/2, V_RK[n] + k_v2/2 )
        
        k_x4 = dt_RK * F( X_RK[n] + k_x3, Y_RK[n] + k_y3, U_RK[n] + k_u3, V_RK[n] + k_v3 )
        k_y4 = dt_RK * G( X_RK[n] + k_x3, Y_RK[n] + k_y3, U_RK[n] + k_u3, V_RK[n] + k_v3 )
        k_u4 = dt_RK * H( X_RK[n] + k_x3, Y_RK[n] + k_y3, U_RK[n] + k_u3, V_RK[n] + k_v3 )
        k_v4 = dt_RK * I( X_RK[n] + k_x3, Y_RK[n] + k_y3, U_RK[n] + k_u3, V_RK[n] + k_v3 )
        
        X_RK[n+1] = X_RK[n] + k_x1/6 + k_x2/3 + k_x3/3 + k_x4/6
        Y_RK[n+1] = Y_RK[n] + k_y1/6 + k_y2/3 + k_y3/3 + k_y4/6
        U_RK[n+1] = U_RK[n] + k_u1/6 + k_u2/3 + k_u3/3 + k_u4/6
        V_RK[n+1] = V_RK[n] + k_v1/6 + k_v2/3 + k_v3/3 + k_v4/6
        
        time += dt_RK
        
        if (Y_RK[n+1]<0):
            switch = True
        
        if (Y_RK[n+1] >0 and X_RK[n+1]>=r-tol and switch==True):
            #print("Counting: ", count)
            period[count] = time
            time=0
            count+=1
            switch =False
            break

fig = plt.figure(figsize=(14, 5))
plt.title("Kepler's third law for planets with nearly circular orbits")
plt.plot(radius**3, period**2, color = "black")
plt.loglog([0.7233**3], [0.6152**2], label = "Venus", marker="o", markersize = 15, color = "orange")
plt.loglog([1], [1], label = "Earth", marker="o", markersize = 15, color = "teal")
plt.loglog([1.5237**3], [1.8809**2], label = "Mars", marker="o", markersize = 15, color = "maroon")
plt.loglog([5.2028**3], [11.862**2], label = "Jupiter", marker="o", markersize = 15, color = "sienna")
plt.loglog([9.5388**3], [29.456**2], label = "Saturn", marker="o", markersize = 15, color = "tan")
plt.loglog([19.191**3], [84.07**2], label = "Uranus", marker="o", markersize = 15, color = "cyan")
plt.loglog([30.061**3], [164.81**2], label = "Neptun", marker="o", markersize = 15, color = "blue")
plt.legend(loc = 4)
plt.xlabel(r"Square of orbital period [yr$^2$]")
plt.ylabel(r"Cube of the semimajor axis [AU$^3$]")
#plt.savefig("/Users/elveb/Documents/1_kepler.pdf")
plt.grid()
plt.show()
"""
