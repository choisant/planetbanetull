# -*- coding: utf-8 -*-
"""
Created on Wed Apr 18 12:11:19 2018

@author: elveb
"""
import numpy as np
import matplotlib.pyplot as plt

T = 1                       #Orbital period [yr] (3.2e7 [s])
R = 1                       #Aphelion distance (radius of path) [AU] (1.5e11 [m])
GMs = 4*(np.pi**2)           #Mass of Sun*Gravitaional constant [AU^3/yr^2]
Me = (4*(np.pi**2))/332950   #Mass of Earth [AU^3/yr^2] (6.0e24 [kg])

#Initial conditions
X0 = 1
Y0 = 0
U0 = 0
V0 = 2*np.pi

def F(X_, Y_, U_, V_):  #dX/dt
    return U_

def G(X_, Y_, U_, V_):  #dY/dt
    return V_

def H(X_, Y_, U_, V_):  #dU/dt
    return (-(GMs)/((np.sqrt(X_**2+Y_**2)**3)))*X_

def I(X_, Y_, U_, V_): #dV/dt
    return (-(GMs)/((np.sqrt(X_**2+Y_**2)**3)))*Y_

#RUNGE-KUTTA (4th order)
t_min = 0
t_max = 1
dt_RK = 0.004                   #time step / tau #RK=0.0001
N_RK = int(t_max/dt_RK)
t_RK = np.linspace(t_min, t_max, N_RK)

X_RK = np.zeros(N_RK)
Y_RK = np.zeros(N_RK)
U_RK = np.zeros(N_RK)
V_RK = np.zeros(N_RK)
E_RK = np.zeros(N_RK)    #Total energy/mass
Ek_RK = np.zeros(N_RK)   #Kinetic energy
Ep_RK = np.zeros(N_RK)   #Potential energy

X_RK[0] = X0
Y_RK[0] = Y0
U_RK[0] = U0
V_RK[0] = V0
Ek_RK[0] = 0.5 * Me * np.sqrt(U_RK[0]**2 + V_RK[0]**2)**2
Ep_RK[0] = -((GMs) * Me) / (np.sqrt(X_RK[0]**2 + Y_RK[0]**2))
E_RK[0] = Ek_RK[0] + Ep_RK[0]

for n in range(N_RK-1):
  k_x1 = dt_RK * F( X_RK[n], Y_RK[n], U_RK[n], V_RK[n] )
  k_y1 = dt_RK * G( X_RK[n], Y_RK[n], U_RK[n], V_RK[n] )
  k_u1 = dt_RK * H( X_RK[n], Y_RK[n], U_RK[n], V_RK[n] )
  k_v1 = dt_RK * I( X_RK[n], Y_RK[n], U_RK[n], V_RK[n] )
    
  k_x2 = dt_RK * F( X_RK[n] + k_x1/2, Y_RK[n] + k_y1/2, U_RK[n] + k_u1/2, V_RK[n] + k_v1/2 )
  k_y2 = dt_RK * G( X_RK[n] + k_x1/2, Y_RK[n] + k_y1/2, U_RK[n] + k_u1/2, V_RK[n] + k_v1/2 )
  k_u2 = dt_RK * H( X_RK[n] + k_x1/2, Y_RK[n] + k_y1/2, U_RK[n] + k_u1/2, V_RK[n] + k_v1/2 )
  k_v2 = dt_RK * I( X_RK[n] + k_x1/2, Y_RK[n] + k_y1/2, U_RK[n] + k_u1/2, V_RK[n] + k_v1/2 )
    
  k_x3 = dt_RK * F( X_RK[n] + k_x2/2, Y_RK[n] + k_y2/2, U_RK[n] + k_u2/2, V_RK[n] + k_v2/2 )
  k_y3 = dt_RK * G( X_RK[n] + k_x2/2, Y_RK[n] + k_y2/2, U_RK[n] + k_u2/2, V_RK[n] + k_v2/2 )
  k_u3 = dt_RK * H( X_RK[n] + k_x2/2, Y_RK[n] + k_y2/2, U_RK[n] + k_u2/2, V_RK[n] + k_v2/2 )
  k_v3 = dt_RK * I( X_RK[n] + k_x2/2, Y_RK[n] + k_y2/2, U_RK[n] + k_u2/2, V_RK[n] + k_v2/2 )
    
  k_x4 = dt_RK * F( X_RK[n] + k_x3, Y_RK[n] + k_y3, U_RK[n] + k_u3, V_RK[n] + k_v3 )
  k_y4 = dt_RK * G( X_RK[n] + k_x3, Y_RK[n] + k_y3, U_RK[n] + k_u3, V_RK[n] + k_v3 )
  k_u4 = dt_RK * H( X_RK[n] + k_x3, Y_RK[n] + k_y3, U_RK[n] + k_u3, V_RK[n] + k_v3 )
  k_v4 = dt_RK * I( X_RK[n] + k_x3, Y_RK[n] + k_y3, U_RK[n] + k_u3, V_RK[n] + k_v3 )
    
  X_RK[n+1] = X_RK[n] + k_x1/6 + k_x2/3 + k_x3/3 + k_x4/6
  Y_RK[n+1] = Y_RK[n] + k_y1/6 + k_y2/3 + k_y3/3 + k_y4/6
  U_RK[n+1] = U_RK[n] + k_u1/6 + k_u2/3 + k_u3/3 + k_u4/6
  V_RK[n+1] = V_RK[n] + k_v1/6 + k_v2/3 + k_v3/3 + k_v4/6

  Ek_RK[n+1] = 0.5 * Me * np.sqrt(U_RK[n+1]**2 + V_RK[n+1]**2)**2
  Ep_RK[n+1] = -((GMs) * Me) / (np.sqrt(X_RK[n+1]**2 + Y_RK[n+1]**2))
  E_RK[n+1] = Ek_RK[n+1] + Ep_RK[n+1]

####################################################################
#EULER-CROMER
dt_EC = 0.004                               #Time step/tau 0.001
N_EC = int(t_max/dt_EC)
t_EC = np.linspace(t_min, t_max, N_EC) 

X_EC = np.zeros(N_EC)
Y_EC = np.zeros(N_EC)
U_EC = np.zeros(N_EC)
V_EC = np.zeros(N_EC)
E_EC = np.zeros(N_EC)           #Total energy
Ek_EC = np.zeros(N_EC)          #Kinetic energy
Ep_EC = np.zeros(N_EC)          #Potential energy

X_EC[0] = X0
Y_EC[0] = Y0
U_EC[0] = U0
V_EC[0] = V0
Ek_EC[0] = 0.5 * Me * (U_EC[0]**2 + V_EC[0]**2)
Ep_EC[0] = -((GMs)*Me) / np.sqrt(X_EC[0]**2 + Y_EC[0]**2)
E_EC[0] = Ek_EC[0] + Ep_EC[0]

for n in range(N_EC-1):
    U_EC[n+1] = U_EC[n] + (dt_EC * ((-GMs)*X_EC[n]) * (X_EC[n]**2 + Y_EC[n]**2)**(-3/2))
    X_EC[n+1] = X_EC[n] + dt_EC * U_EC[n+1]
    V_EC[n+1] = V_EC[n] + (dt_EC * ((-GMs)*Y_EC[n]) * (X_EC[n]**2 + Y_EC[n]**2)**(-3/2))
    Y_EC[n+1] = Y_EC[n] + dt_EC * V_EC[n+1]
    
    Ek_EC[n+1] = 0.5 * Me * (U_EC[n+1]**2 + V_EC[n+1]**2)
    Ep_EC[n+1] = -(GMs*Me) / np.sqrt(X_EC[n+1]**2 + Y_EC[n+1]**2)
    E_EC[n+1] = Ek_EC[n+1] + Ep_EC[n+1]   
       
#Plots_______________________________________________

#RK
plt.figure()
plt.title("Position of Earth with RK-algorithm")
plt.plot(X_RK, Y_RK, color = "darkblue", label = "Earth orbit")
plt.plot([0], [0], color = "darkorange", marker = "o", markersize = 19, label = "Fixed sun")
plt.legend(loc = 4)
plt.xlabel(r"$x$ [AU]")
plt.ylabel(r"$y$ [AU]")
plt.axis("equal")
plt.grid()
#plt.savefig("/Users/elveb/Documents/1_RK_pos.pdf")
plt.show()

#EC
plt.figure()
plt.title("Position of Earth with EC-algorithm")
plt.plot(X_EC, Y_EC, color = "teal", label = "Earth orbit")
plt.plot([0], [0], color = "darkorange", marker = "o", markersize = 19, label = "Fixed sun")
plt.legend(loc = 4)
plt.xlabel(r"$x$ [AU]")
plt.ylabel(r"$y$ [AU]")
plt.axis("equal")
plt.grid()
#plt.savefig("/Users/elveb/Documents/1_EC_pos.pdf")
plt.show()

#VELOCITY
fig = plt.figure(figsize=(8, 2))
plt.title("Absolute velocity as a function of time")
plt.plot(t_RK, np.sqrt(U_RK**2+V_RK**2), label = "RK", color = "darkblue")
plt.plot(t_EC, np.sqrt(U_EC**2+V_EC**2), label = "EC", color = "teal")
plt.xlabel(r"$t$ [yr]")
plt.ylabel(r"$v$ [AU/yr]")
plt.legend()
plt.grid()
#plt.savefig("/Users/elveb/Documents/1_velo.pdf")
plt.show()

#ENERGY
fig = plt.figure(figsize=(8, 2))
plt.title("Total energy as a function of time")
plt.plot(t_RK, E_RK, label = "RK", color = "crimson")
plt.plot(t_EC, E_EC, label = "EC", color = "orange")
plt.xlabel(r"$t$ [yr]")
plt.ylabel(r"$Etot$ [AU$^5$ / yr$^4$]")
plt.legend()
plt.grid()
#plt.savefig("/Users/elveb/Documents/1_Etot.pdf")
plt.show()

fig = plt.figure(figsize=(8, 2))
plt.title("Kinetic energy as a function of time")
plt.plot(t_RK, Ek_RK, label = "RK", color = "crimson")
plt.plot(t_EC, Ek_EC, label = "EC", color = "orange")
plt.xlabel(r"$t$ [yr]")
plt.ylabel(r"$Ek$ [AU$^5$ / yr$^4$]")
plt.legend()
plt.grid()
#plt.savefig("/Users/elveb/Documents/1_Ek.pdf")
plt.show()

fig = plt.figure(figsize=(8, 2))
plt.title("Potential energy as a function of time")
plt.plot(t_RK, Ep_RK, label = "RK", color = "crimson")
plt.plot(t_EC, Ep_EC, label = "EC", color = "orange")
plt.xlabel(r"$t$ [yr]")
plt.ylabel(r"$Ep$ [AU$^5$ / yr$^4$]")
plt.legend(loc = 4)
plt.grid()
#plt.savefig("/Users/elveb/Documents/1_Ep.pdf")
plt.show()

"""
plt.title("Velocity as function of time, RK", y=1.05)
plt.plot(t_RK, np.sqrt(U_RK**2+V_RK**2), color = "olive", label = "Absolute velocity")
plt.plot(t_RK, U_RK, color = "teal", label = "Velocity along y-axis")
plt.plot(t_RK, V_RK, color = "darkblue", label = "Velocity along y-axis")
plt.legend()
plt.xlabel(r"$t$ [yr]")
plt.ylabel(r"$v$ [AU/yr]")
plt.grid()
#plt.savefig("/Users/elveb/Documents/RK_2.pdf")
plt.show()

plt.figure()
plt.title("Velocity as functino of time, EC", y=1.05)
plt.plot(t_EC, np.sqrt(U_EC**2+V_EC**2), color = "olive", label = "Absolute velocitys")
plt.plot(t_EC, U_EC, color = "teal", label = "Velocity along x-axis")
plt.plot(t_EC, V_EC, color = "darkblue", label = "Velocity along y-axis")
plt.legend()
plt.xlabel(r"$t$ [yr]")
plt.ylabel(r"$v$ [AU/yr]")
plt.grid()
#plt.savefig("/Users/elveb/Documents/EC_2.pdf")
plt.show()

plt.title("Velocity ")
plt.plot(U_RK, V_RK, label = "RK", color = "darkblue")
plt.plot(U_EC, V_EC, label = "EC", color = "teal")
plt.xlabel(r"$u$ [AU/yr]")
plt.ylabel(r"$v$ [AU/yr]")
plt.legend()
plt.grid()
#plt.savefig("/Users/elveb/Documents/1_velo.pdf")
plt.show()

plt.title("Energy as function of time, RK")
plt.plot(t, E_RK, color = "olive", label = "Total energy")
plt.plot(t, Ek_RK, color = "teal", label = "Kinetic energy")
plt.plot(t, Ep_RK, color = "darkblue", label = "Potential energy")
plt.xlabel(r"$t$ [yr]")
plt.ylabel("Energy [AU^5 / yr^4]")
plt.legend()
plt.grid()
#plt.savefig("/Users/elveb/Documents/RK_3.pdf")
plt.show()

plt.title("Energy as function of time, EC",  y=1.05)
plt.plot(t_EC, E_EC, color = "olive", label = "Total energy")
plt.plot(t_EC, Ek_EC, color = "teal", label = "Kinetic energy")
plt.plot(t_EC, Ep_EC, color = "darkblue", label = "Potential energy")
plt.xlabel(r"$t$ [yr]")
plt.ylabel("Energy [AU^5 / yr^4]")
plt.legend()
plt.grid()
#plt.savefig("/Users/elveb/Documents/EC_3.pdf")
plt.show()"""
