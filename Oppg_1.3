# -*- coding: utf-8 -*-
"""
Created on Wed Apr 18 14:51:12 2018

@author: elveb
"""
"""
Hold farten konstant. Varier radiusen og se at perioden endrer seg.
"""

import numpy as np
import matplotlib.pyplot as plt

T = 1                           #Orbital period [yr] (3.2e7 [s])
R = 1                           #Aphelion distance (radius of path) [AU] (1.5e11 [m])
GMs = 4*(np.pi**2)              #Mass of Sun*Gravitaional constant [AU^3/yr^2]
Me = (4*(np.pi**2))/332950      #Mass of Earth [AU^3/yr^2] (6.0e24 [kg])
"""
radius = np.linspace(0.5, 35, 100)
period = np.zeros(len(radius))
count = 0

def F(X_, Y_, U_, V_):  #dX/dt
    return U_

def G(X_, Y_, U_, V_):  #dY/dt
    return V_

def H(X_, Y_, U_, V_):  #dU/dt
    return (-(GMs)/((np.sqrt(X_**2+Y_**2)**3)))*X_

def I(X_, Y_, U_, V_):  #dV/dt
    return (-(GMs)/((np.sqrt(X_**2+Y_**2)**3)))*Y_

for r in radius:
    X0 = r
    Y0 = 0
    U0 = 0
    V0 = 2*np.pi

    tol = 0.0005 #[AU]
    count = 0

    t_min = 0
    t_max = 200
    dt_RK = 0.0001                   #time step / tau #RK=0.0001
    N_RK = int(t_max/dt_RK)
    t_RK = np.linspace(t_min, t_max, N_RK)

    X_RK = np.zeros(N_RK)
    Y_RK = np.zeros(N_RK)
    U_RK = np.zeros(N_RK)
    V_RK = np.zeros(N_RK)
    
    X_RK[0] = X0
    Y_RK[0] = Y0
    U_RK[0] = U0
    V_RK[0] = V0
    
    for n in range(N_RK-1):
        k_x1 = dt_RK * F( X_RK[n], Y_RK[n], U_RK[n], V_RK[n] )
        k_y1 = dt_RK * G( X_RK[n], Y_RK[n], U_RK[n], V_RK[n] )
        k_u1 = dt_RK * H( X_RK[n], Y_RK[n], U_RK[n], V_RK[n] )
        k_v1 = dt_RK * I( X_RK[n], Y_RK[n], U_RK[n], V_RK[n] )
        
        k_x2 = dt_RK * F( X_RK[n] + k_x1/2, Y_RK[n] + k_y1/2, U_RK[n] + k_u1/2, V_RK[n] + k_v1/2 )
        k_y2 = dt_RK * G( X_RK[n] + k_x1/2, Y_RK[n] + k_y1/2, U_RK[n] + k_u1/2, V_RK[n] + k_v1/2 )
        k_u2 = dt_RK * H( X_RK[n] + k_x1/2, Y_RK[n] + k_y1/2, U_RK[n] + k_u1/2, V_RK[n] + k_v1/2 )
        k_v2 = dt_RK * I( X_RK[n] + k_x1/2, Y_RK[n] + k_y1/2, U_RK[n] + k_u1/2, V_RK[n] + k_v1/2 )
        
        k_x3 = dt_RK * F( X_RK[n] + k_x2/2, Y_RK[n] + k_y2/2, U_RK[n] + k_u2/2, V_RK[n] + k_v2/2 )
        k_y3 = dt_RK * G( X_RK[n] + k_x2/2, Y_RK[n] + k_y2/2, U_RK[n] + k_u2/2, V_RK[n] + k_v2/2 )
        k_u3 = dt_RK * H( X_RK[n] + k_x2/2, Y_RK[n] + k_y2/2, U_RK[n] + k_u2/2, V_RK[n] + k_v2/2 )
        k_v3 = dt_RK * I( X_RK[n] + k_x2/2, Y_RK[n] + k_y2/2, U_RK[n] + k_u2/2, V_RK[n] + k_v2/2 )
        
        k_x4 = dt_RK * F( X_RK[n] + k_x3, Y_RK[n] + k_y3, U_RK[n] + k_u3, V_RK[n] + k_v3 )
        k_y4 = dt_RK * G( X_RK[n] + k_x3, Y_RK[n] + k_y3, U_RK[n] + k_u3, V_RK[n] + k_v3 )
        k_u4 = dt_RK * H( X_RK[n] + k_x3, Y_RK[n] + k_y3, U_RK[n] + k_u3, V_RK[n] + k_v3 )
        k_v4 = dt_RK * I( X_RK[n] + k_x3, Y_RK[n] + k_y3, U_RK[n] + k_u3, V_RK[n] + k_v3 )
        
        X_RK[n+1] = X_RK[n] + k_x1/6 + k_x2/3 + k_x3/3 + k_x4/6
        Y_RK[n+1] = Y_RK[n] + k_y1/6 + k_y2/3 + k_y3/3 + k_y4/6
        U_RK[n+1] = U_RK[n] + k_u1/6 + k_u2/3 + k_u3/3 + k_u4/6
        V_RK[n+1] = V_RK[n] + k_v1/6 + k_v2/3 + k_v3/3 + k_v4/6
        
        #if (Y_RK[n+1] < tol and X_RK[n+1] < r+tol):
        #    period[count] = 
        #    count+=1
        #    break
"""
#Plots___________________________________________________________________________________

plt.figure()
fig = plt.figure(figsize=(14, 5))
plt.title("Kepler's third law for planets with nearly circular orbits")
#plt.plot(radius**3, period**2, color = "black")
plt.loglog([0.7233], [0.6152], label = "Venus", marker="o", markersize = 15, color = "orange")
plt.loglog([1], [1], label = "Earth", marker="o", markersize = 15, color = "teal")
plt.loglog([1.5237], [1.8809], label = "Mars", marker="o", markersize = 15, color = "maroon")
plt.loglog([5.2028], [11.862], label = "Jupiter", marker="o", markersize = 15, color = "sienna")
plt.loglog([9.5388], [29.456], label = "Saturn", marker="o", markersize = 15, color = "tan")
plt.loglog([19.191], [84.07], label = "Uranus", marker="o", markersize = 15, color = "cyan")
plt.loglog([30.061], [164.81], label = "Neptun", marker="o", markersize = 15, color = "blue")
plt.legend(loc = 4)
plt.xlabel(r"Square of orbital period [yr$^2$]")
plt.ylabel(r"Cube of the semimajor axis [AU$^3$]")
plt.grid()
plt.show()
